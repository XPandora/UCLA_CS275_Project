#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct FishDataBuffer {
    float3 position;
    float3 direction;
    float3 flockHeading;
    float3 flockCentre;
    float3 separationHeading;
    float3 avoidanceHeading; 
    int numFlockmates;
    float totFear;
    float maxFear;
    float threat; // 0 for prey 1 for predator
};

RWStructuredBuffer<FishDataBuffer> fishDatBuffer;
int numFishes;
float viewRadius;
float avoidRadius;
float D0 = 100;

[numthreads(threadGroupSize,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float tmpMaxThreat = 0;
    for (int idxNeighbor = 0; idxNeighbor < numFishes; idxNeighbor ++) {
        if (id.x != idxNeighbor) {
            FishDataBuffer neighbor = fishDatBuffer[idxNeighbor];
            float3 offset = neighbor.position - fishDatBuffer[id.x].position;
            float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            if (sqrDst < viewRadius * viewRadius) {
                fishDatBuffer[id.x].numFlockmates += 1;
                fishDatBuffer[id.x].flockHeading += neighbor.direction;
                fishDatBuffer[id.x].flockCentre += neighbor.position;

                if (sqrDst < avoidRadius * avoidRadius) {
                    fishDatBuffer[id.x].separationHeading -= offset / sqrDst;
                }
                // accumulate fear
                fishDatBuffer[id.x].totFear += neighbor.threat * D0 / sqrt(sqrDst);
                tmpMaxThreat = max(tmpMaxThreat, neighbor.threat * D0 / sqrt(sqrDst));
            }
        }
    }
    fishDatBuffer[id.x].maxFear = tmpMaxThreat;
}